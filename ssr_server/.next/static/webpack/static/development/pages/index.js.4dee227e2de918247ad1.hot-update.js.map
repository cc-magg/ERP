{"version":3,"file":"static/webpack/static\\development\\pages\\index.js.4dee227e2de918247ad1.hot-update.js","sources":["webpack:///./pages/index.js"],"sourcesContent":["import React, { Component } from \"react\";\r\nimport { initStore } from '../store';\r\nimport Router from 'next/router';\r\nimport { Map as map } from 'immutable';\r\nimport { bindActionCreators } from \"redux\";\r\nimport * as actions from '../public/src/actions/index';\r\n\r\n//import components\r\nimport Home from '../public/src/pages/containers/home';\r\n\r\nimport {\r\n    LocalStorageCheckForThis,\r\n    LocalStorageGetData,\r\n    LocalStorageRemoveItem\r\n} from '../localStorageOptions';\r\n\r\nclass HomePage extends Component {\r\n    componentDidMount() {\r\n        /*if(LocalStorageCheckForThis('access') && this.props.result.size == 0) {\r\n            let access = LocalStorageGetData('access');\r\n            this.props.actions.saveUserAccess(map(JSON.parse(access)));\r\n        }*/\r\n        //here we use the localstorage eventlistener so that every tab from the browser listen when the logout is being called and then\r\n        //it redirects to login all tabs from the browser (this event is called after the cookie.remove() so the login will show the form for every tab)\r\n        //Add event listener when a restricted Page Component mounts\r\n        window.addEventListener('storage', event => {\r\n            if (event.key === 'logout') {\r\n                this.props.actions.saveUserAccess('');\r\n                Router.push('/login');\r\n            }\r\n        });\r\n        //navegation Events\r\n        Router.onRouteChangeStart = url => {\r\n            console.log('App is changing to: ', url);\r\n            this.props.actions.showSpinner(true);\r\n        }\r\n        Router.onRouteChangeComplete = url => {\r\n            console.log('App changed to: ', url);\r\n            this.props.actions.showSpinner(false);\r\n        }\r\n    }\r\n    componentWillUnmount() {\r\n        //Remove event listener when the Component unmount and delete all data\r\n        //the second parameter must be the same as the window.addEventListener second parameter for it to work\r\n        window.removeEventListener('storage', event => {\r\n            if (event.key === 'logout') {\r\n                this.props.actions.saveUserAccess('');\r\n                Router.push('/login');\r\n            }\r\n        });\r\n        window.localStorage.removeItem('logout');\r\n    }\r\n    render() {\r\n        return (<Home />)\r\n    }\r\n}\r\nfunction mapStateToProps(state, props) {\r\n    /*let result = map();\r\n    let access = state.get('user').get('access');\r\n    if(access != ''){\r\n        result = access;\r\n    }\r\n    return {\r\n        result\r\n    }*/\r\n}\r\nfunction mapDispatchToProps(dispatch) {\r\n    return {\r\n        actions: bindActionCreators(actions, dispatch)\r\n    }\r\n}\r\n\r\nexport default initStore(HomePage, '', mapDispatchToProps, 'HOME')"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAKA;;;;;;;;;;;;;AACA;AAAA;AACA;AAAA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;;;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;;;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;;AAtCA;AACA;AAuCA;AACA;;;;;;;;AAQA;AACA;AAAA;AACA;AACA;AADA;AAGA;AACA;AACA;;;;A","sourceRoot":""}