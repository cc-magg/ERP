{"ast":null,"code":"import { call, put, takeEvery, takeLatest, all } from 'redux-saga/effects';\nimport axios from 'axios';\nimport { Map as map } from 'immutable';\nimport { login } from '../../../utils/auth';\nimport { CALL_METRICS, CALL_USER_ACCESS, CALL_PROFESORS } from '../action-types/index.js';\nimport { setApiData, saveUserAccess, saveLoginError, saveProfesors, saveUserTokenAndDeleteOldErrors } from '../actions/index.js';\nimport token from '../../../config';\nimport Cookies from 'js-cookie';\nexport function* getMetrics(action) {\n  try {\n    const headers = {\n      method: 'GET',\n      mode: 'no-cors',\n      headers: {\n        'Authorization': `Bearer ${token.apiToken}`,\n        // Need to get from store once login done\n        'Content-Type': 'application/json'\n      }\n    };\n    const response = yield call(axios.get, `http://localhost:8080/metrics/${action.payload.uuid}/${action.payload.type}`, headers);\n    yield put(setApiData(response.data));\n  } catch (error) {\n    console.log('Request failed at metrics¡¡ error: ' + error);\n  }\n}\nexport function* getUserAccess(action) {\n  try {\n    const response = yield call(axios.get, `http://localhost:8080/login/${action.payload.user}/${action.payload.password}`); //if(response.data) login(response.data.newUserToken);\n    //yield put(saveUserAccess(map(response.data)));\n    //console.log('resultado', response.data);\n\n    yield put(response.data.error ? saveLoginError(response.data.error) : saveUserTokenAndDeleteOldErrors(response.data.newUserToken));\n  } catch (error) {\n    console.log('Request failed¡¡ error: ' + error);\n  }\n}\nexport function* getProfesors(action) {\n  try {\n    const response = yield call(axios.post, `http://localhost:5678/graphql`, {\n      query: 'query Profesores{profesores {id,nombre,nacionalidad,genero,cursos {titulo,id}}}'\n    });\n    yield put(saveProfesors(map(response.data.data)));\n  } catch (error) {\n    console.log('Request failed¡¡ error: ' + error);\n  }\n}\nexport function* actionsWatcher() {\n  yield all([takeEvery(CALL_METRICS, getMetrics), takeEvery(CALL_USER_ACCESS, getUserAccess), takeEvery(CALL_PROFESORS, getProfesors)]);\n}\nexport default function* mySaga() {\n  yield all([actionsWatcher()]);\n}","map":{"version":3,"sources":["D:/www/gits-proyectos/proyecto ERP/ERP V-2/ssr_server/public/src/sagas/index.js"],"names":["call","put","takeEvery","takeLatest","all","axios","Map","map","login","CALL_METRICS","CALL_USER_ACCESS","CALL_PROFESORS","setApiData","saveUserAccess","saveLoginError","saveProfesors","saveUserTokenAndDeleteOldErrors","token","Cookies","getMetrics","action","headers","method","mode","apiToken","response","get","payload","uuid","type","data","error","console","log","getUserAccess","user","password","newUserToken","getProfesors","post","query","actionsWatcher","mySaga"],"mappings":"AAAA,SAASA,IAAT,EAAeC,GAAf,EAAoBC,SAApB,EAA+BC,UAA/B,EAA2CC,GAA3C,QAAsD,oBAAtD;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,GAAG,IAAIC,GAAhB,QAA2B,WAA3B;AAEA,SAASC,KAAT,QAAsB,qBAAtB;AACA,SAASC,YAAT,EAAuBC,gBAAvB,EAAyCC,cAAzC,QAA+D,0BAA/D;AACA,SAASC,UAAT,EAAqBC,cAArB,EAAqCC,cAArC,EAAqDC,aAArD,EAAoEC,+BAApE,QAA2G,qBAA3G;AAEA,OAAOC,KAAP,MAAkB,iBAAlB;AAEA,OAAOC,OAAP,MAAoB,WAApB;AAEA,OAAO,UAAUC,UAAV,CAAqBC,MAArB,EAA6B;AAChC,MAAI;AACA,UAAMC,OAAO,GAAG;AACZC,MAAAA,MAAM,EAAE,KADI;AAEZC,MAAAA,IAAI,EAAE,SAFM;AAGZF,MAAAA,OAAO,EAAE;AACL,yBAAkB,UAASJ,KAAK,CAACO,QAAS,EADrC;AACwC;AAC7C,wBAAgB;AAFX;AAHG,KAAhB;AAQA,UAAMC,QAAQ,GAAG,MAAMzB,IAAI,CAACK,KAAK,CAACqB,GAAP,EAAa,iCAAgCN,MAAM,CAACO,OAAP,CAAeC,IAAK,IAAGR,MAAM,CAACO,OAAP,CAAeE,IAAK,EAAxF,EAA2FR,OAA3F,CAA3B;AAEA,UAAMpB,GAAG,CAACW,UAAU,CAACa,QAAQ,CAACK,IAAV,CAAX,CAAT;AACH,GAZD,CAYE,OAAOC,KAAP,EAAc;AACZC,IAAAA,OAAO,CAACC,GAAR,CAAY,wCAAwCF,KAApD;AACH;AACJ;AACD,OAAO,UAAUG,aAAV,CAAwBd,MAAxB,EAAgC;AACnC,MAAI;AACA,UAAMK,QAAQ,GAAG,MAAMzB,IAAI,CAACK,KAAK,CAACqB,GAAP,EAAa,+BAA8BN,MAAM,CAACO,OAAP,CAAeQ,IAAK,IAAGf,MAAM,CAACO,OAAP,CAAeS,QAAS,EAA1F,CAA3B,CADA,CAGA;AACA;AACA;;AAEA,UAAMnC,GAAG,CAAEwB,QAAQ,CAACK,IAAT,CAAcC,KAAf,GAAuBjB,cAAc,CAACW,QAAQ,CAACK,IAAT,CAAcC,KAAf,CAArC,GAA6Df,+BAA+B,CAACS,QAAQ,CAACK,IAAT,CAAcO,YAAf,CAA7F,CAAT;AACH,GARD,CAQE,OAAON,KAAP,EAAc;AACZC,IAAAA,OAAO,CAACC,GAAR,CAAY,6BAA6BF,KAAzC;AACH;AACJ;AACD,OAAO,UAAUO,YAAV,CAAuBlB,MAAvB,EAA+B;AAClC,MAAI;AACA,UAAMK,QAAQ,GAAG,MAAMzB,IAAI,CAACK,KAAK,CAACkC,IAAP,EAAc,+BAAd,EAA8C;AAAEC,MAAAA,KAAK,EAAE;AAAT,KAA9C,CAA3B;AAEA,UAAMvC,GAAG,CAACc,aAAa,CAACR,GAAG,CAACkB,QAAQ,CAACK,IAAT,CAAcA,IAAf,CAAJ,CAAd,CAAT;AACH,GAJD,CAIE,OAAOC,KAAP,EAAc;AACZC,IAAAA,OAAO,CAACC,GAAR,CAAY,6BAA6BF,KAAzC;AACH;AACJ;AAED,OAAO,UAAUU,cAAV,GAA2B;AAC9B,QAAMrC,GAAG,CAAC,CACNF,SAAS,CAACO,YAAD,EAAeU,UAAf,CADH,EAENjB,SAAS,CAACQ,gBAAD,EAAmBwB,aAAnB,CAFH,EAGNhC,SAAS,CAACS,cAAD,EAAiB2B,YAAjB,CAHH,CAAD,CAAT;AAKH;AAED,eAAe,UAAUI,MAAV,GAAmB;AAC9B,QAAMtC,GAAG,CAAC,CACNqC,cAAc,EADR,CAAD,CAAT;AAGH","sourcesContent":["import { call, put, takeEvery, takeLatest, all } from 'redux-saga/effects';\r\nimport axios from 'axios';\r\nimport { Map as map } from 'immutable';\r\n\r\nimport { login } from '../../../utils/auth';\r\nimport { CALL_METRICS, CALL_USER_ACCESS, CALL_PROFESORS } from '../action-types/index.js';\r\nimport { setApiData, saveUserAccess, saveLoginError, saveProfesors, saveUserTokenAndDeleteOldErrors } from '../actions/index.js';\r\n\r\nimport token from '../../../config';\r\n\r\nimport Cookies from 'js-cookie';\r\n\r\nexport function* getMetrics(action) {\r\n    try {\r\n        const headers = {\r\n            method: 'GET',\r\n            mode: 'no-cors',\r\n            headers: {\r\n                'Authorization': `Bearer ${token.apiToken}`, // Need to get from store once login done\r\n                'Content-Type': 'application/json'\r\n            },\r\n        };\r\n        const response = yield call(axios.get, `http://localhost:8080/metrics/${action.payload.uuid}/${action.payload.type}`, headers);\r\n\r\n        yield put(setApiData(response.data));\r\n    } catch (error) {\r\n        console.log('Request failed at metrics¡¡ error: ' + error);\r\n    }\r\n}\r\nexport function* getUserAccess(action) {\r\n    try {\r\n        const response = yield call(axios.get, `http://localhost:8080/login/${action.payload.user}/${action.payload.password}`);\r\n\r\n        //if(response.data) login(response.data.newUserToken);\r\n        //yield put(saveUserAccess(map(response.data)));\r\n        //console.log('resultado', response.data);\r\n\r\n        yield put((response.data.error)? saveLoginError(response.data.error) : saveUserTokenAndDeleteOldErrors(response.data.newUserToken));\r\n    } catch (error) {\r\n        console.log('Request failed¡¡ error: ' + error);\r\n    }\r\n}\r\nexport function* getProfesors(action) {\r\n    try {\r\n        const response = yield call(axios.post, `http://localhost:5678/graphql`, { query: 'query Profesores{profesores {id,nombre,nacionalidad,genero,cursos {titulo,id}}}' });\r\n\r\n        yield put(saveProfesors(map(response.data.data)));\r\n    } catch (error) {\r\n        console.log('Request failed¡¡ error: ' + error);\r\n    }\r\n}\r\n\r\nexport function* actionsWatcher() {\r\n    yield all([\r\n        takeEvery(CALL_METRICS, getMetrics),\r\n        takeEvery(CALL_USER_ACCESS, getUserAccess),\r\n        takeEvery(CALL_PROFESORS, getProfesors)\r\n    ])\r\n}\r\n\r\nexport default function* mySaga() {\r\n    yield all([\r\n        actionsWatcher()\r\n    ])\r\n}"]},"metadata":{},"sourceType":"module"}