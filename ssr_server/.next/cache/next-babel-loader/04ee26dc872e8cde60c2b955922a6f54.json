{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport { createStore, applyMiddleware } from 'redux';\nimport withRedux from 'next-redux-wrapper';\nimport nextReduxSaga from 'next-redux-saga';\nimport { Map as map } from 'immutable'; //import middlewares\n\nimport createSagaMiddleware from 'redux-saga';\nimport logger from 'redux-logger';\nimport thunk from 'redux-thunk';\nimport reducer from './public/src/reducers/index';\nimport mySaga from './public/src/sagas/index';\nvar sagaMiddleware = createSagaMiddleware();\n\nvar bindMiddleware = function bindMiddleware(middleware) {\n  //if (process.env.NODE_ENV !== 'production') {\n  var _require = require('redux-devtools-extension'),\n      composeWithDevTools = _require.composeWithDevTools;\n\n  return composeWithDevTools(applyMiddleware.apply(void 0, _toConsumableArray(middleware))); //}\n  //return applyMiddleware(...middleware)\n};\n\nexport function configureStore() {\n  var store = createStore(reducer, map({}), //initial state\n  bindMiddleware([logger, thunk, sagaMiddleware]));\n  console.log('store created'); //store.sagaTask = sagaMiddleware.run(mySaga)\n\n  store.runSagaTask = function () {\n    store.sagaTask = sagaMiddleware.run(mySaga);\n  }; // run the rootSaga initially\n\n\n  store.runSagaTask();\n  return store;\n}\nexport function initStore(BaseComponent, mapStateToProps, mapDispatchToProps, from) {\n  console.log(' from ' + from);\n  return withRedux(configureStore, mapStateToProps, mapDispatchToProps)(nextReduxSaga(BaseComponent));\n}","map":{"version":3,"sources":["D:/www/gits-proyectos/proyecto ERP/ERP V-2/ssr_server/store.js"],"names":["createStore","applyMiddleware","withRedux","nextReduxSaga","Map","map","createSagaMiddleware","logger","thunk","reducer","mySaga","sagaMiddleware","bindMiddleware","middleware","require","composeWithDevTools","configureStore","store","console","log","runSagaTask","sagaTask","run","initStore","BaseComponent","mapStateToProps","mapDispatchToProps","from"],"mappings":";AAAA,SAAQA,WAAR,EAAqBC,eAArB,QAA2C,OAA3C;AACA,OAAOC,SAAP,MAAsB,oBAAtB;AACA,OAAOC,aAAP,MAA0B,iBAA1B;AACA,SAASC,GAAG,IAAIC,GAAhB,QAA2B,WAA3B,C,CAEA;;AACA,OAAOC,oBAAP,MAAiC,YAAjC;AACA,OAAOC,MAAP,MAAmB,cAAnB;AACA,OAAOC,KAAP,MAAkB,aAAlB;AAEA,OAAOC,OAAP,MAAoB,6BAApB;AAEA,OAAOC,MAAP,MAAmB,0BAAnB;AAEA,IAAMC,cAAc,GAAGL,oBAAoB,EAA3C;;AAEA,IAAMM,cAAc,GAAG,SAAjBA,cAAiB,CAACC,UAAD,EAAgB;AACrC;AADqC,iBAEHC,OAAO,CAAC,0BAAD,CAFJ;AAAA,MAE3BC,mBAF2B,YAE3BA,mBAF2B;;AAGnC,SAAOA,mBAAmB,CAACd,eAAe,MAAf,4BAAmBY,UAAnB,EAAD,CAA1B,CAHmC,CAIrC;AACA;AACD,CAND;;AAQA,OAAO,SAASG,cAAT,GAA2B;AAChC,MAAMC,KAAK,GAAGjB,WAAW,CACvBS,OADuB,EAEvBJ,GAAG,CAAC,EAAD,CAFoB,EAEf;AACRO,EAAAA,cAAc,CAAC,CAACL,MAAD,EAASC,KAAT,EAAgBG,cAAhB,CAAD,CAHS,CAAzB;AAKAO,EAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ,EANgC,CAQhC;;AACAF,EAAAA,KAAK,CAACG,WAAN,GAAoB,YAAM;AACxBH,IAAAA,KAAK,CAACI,QAAN,GAAiBV,cAAc,CAACW,GAAf,CAAmBZ,MAAnB,CAAjB;AACD,GAFD,CATgC,CAahC;;;AACAO,EAAAA,KAAK,CAACG,WAAN;AACA,SAAOH,KAAP;AACD;AAED,OAAO,SAASM,SAAT,CAAoBC,aAApB,EAAmCC,eAAnC,EAAoDC,kBAApD,EAAwEC,IAAxE,EAA8E;AACnFT,EAAAA,OAAO,CAACC,GAAR,CAAY,WAASQ,IAArB;AACA,SAAOzB,SAAS,CAACc,cAAD,EAAiBS,eAAjB,EAAkCC,kBAAlC,CAAT,CAA+DvB,aAAa,CAACqB,aAAD,CAA5E,CAAP;AACD","sourcesContent":["import {createStore, applyMiddleware} from 'redux'\r\nimport withRedux from 'next-redux-wrapper'\r\nimport nextReduxSaga from 'next-redux-saga'\r\nimport { Map as map } from 'immutable'\r\n\r\n//import middlewares\r\nimport createSagaMiddleware from 'redux-saga'\r\nimport logger from 'redux-logger';\r\nimport thunk from 'redux-thunk';\r\n\r\nimport reducer from './public/src/reducers/index';\r\n\r\nimport mySaga from './public/src/sagas/index'\r\n\r\nconst sagaMiddleware = createSagaMiddleware()\r\n\r\nconst bindMiddleware = (middleware) => {\r\n  //if (process.env.NODE_ENV !== 'production') {\r\n    const { composeWithDevTools } = require('redux-devtools-extension')\r\n    return composeWithDevTools(applyMiddleware(...middleware))\r\n  //}\r\n  //return applyMiddleware(...middleware)\r\n}\r\n\r\nexport function configureStore () {\r\n  const store = createStore(\r\n    reducer,\r\n    map({}),//initial state\r\n    bindMiddleware([logger, thunk, sagaMiddleware])\r\n  )\r\n  console.log('store created');\r\n\r\n  //store.sagaTask = sagaMiddleware.run(mySaga)\r\n  store.runSagaTask = () => {\r\n    store.sagaTask = sagaMiddleware.run(mySaga)\r\n  }\r\n\r\n  // run the rootSaga initially\r\n  store.runSagaTask()\r\n  return store\r\n}\r\n\r\nexport function initStore (BaseComponent, mapStateToProps, mapDispatchToProps, from) {\r\n  console.log(' from '+from)\r\n  return withRedux(configureStore, mapStateToProps, mapDispatchToProps)(nextReduxSaga(BaseComponent))\r\n}"]},"metadata":{},"sourceType":"module"}