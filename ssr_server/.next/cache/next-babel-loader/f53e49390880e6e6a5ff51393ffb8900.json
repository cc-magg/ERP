{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(getUserAccess),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(getProfesors),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(actionsWatcher),\n    _marked4 = /*#__PURE__*/_regeneratorRuntime.mark(mySaga);\n\nimport { call, put, takeEvery, takeLatest, all } from 'redux-saga/effects';\nimport axios from 'axios';\nimport { Map as map } from 'immutable';\nimport { login } from '../../../utils/auth';\nimport { CALL_METRICS, CALL_USER_ACCESS, CALL_PROFESORS } from '../action-types/index.js';\nimport { setApiData, saveUserAccess, saveLoginError, saveProfesors, saveUserTokenAndDeleteOldErrors } from '../actions/index.js';\nimport { config } from '../../../config';\nexport function getUserAccess(action) {\n  var response;\n  return _regeneratorRuntime.wrap(function getUserAccess$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          console.log('antes del call'); //const response = yield call(axios.get, `http://localhost:8080/login/${action.payload.user}/${action.payload.password}`);\n\n          _context.next = 4;\n          return call(axios.post('http://localhost:3000/api', {\n            apiKeyToken: config.apiKeyToken\n          }));\n\n        case 4:\n          response = _context.sent;\n\n          /*const apiCall = () => {\r\n              return axios.post('http://localhost:3000/api/auth/sign-in', { apiKeyToken: config.apiKeyToken }, {\r\n                  auth: {\r\n                      email: action.payload.email,\r\n                      password: action.payload.password\r\n                  }\r\n              }).then(response => response.data)\r\n                  .catch(err => {\r\n                      throw err;\r\n                  });\r\n          }*/\n          //if(response.data) login(response.data.newUserToken);\n          //yield put(saveUserAccess(map(response.data)));\n          console.log('resultado', response.data);\n          _context.next = 8;\n          return put(response.data.error ? saveLoginError(response.data.error) : saveUserTokenAndDeleteOldErrors(response.data.newUserToken));\n\n        case 8:\n          _context.next = 13;\n          break;\n\n        case 10:\n          _context.prev = 10;\n          _context.t0 = _context[\"catch\"](0);\n          console.log('Request failed¡¡ error: ' + _context.t0);\n\n        case 13:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 10]]);\n}\nexport function getProfesors(action) {\n  var response;\n  return _regeneratorRuntime.wrap(function getProfesors$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.prev = 0;\n          _context2.next = 3;\n          return call(axios.post, \"http://localhost:5678/graphql\", {\n            query: 'query Profesores{profesores {id,nombre,nacionalidad,genero,cursos {titulo,id}}}'\n          });\n\n        case 3:\n          response = _context2.sent;\n          _context2.next = 6;\n          return put(saveProfesors(map(response.data.data)));\n\n        case 6:\n          _context2.next = 11;\n          break;\n\n        case 8:\n          _context2.prev = 8;\n          _context2.t0 = _context2[\"catch\"](0);\n          console.log('Request failed¡¡ error: ' + _context2.t0);\n\n        case 11:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2, null, [[0, 8]]);\n}\nexport function actionsWatcher() {\n  return _regeneratorRuntime.wrap(function actionsWatcher$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return all([takeEvery(CALL_USER_ACCESS, getUserAccess), takeEvery(CALL_PROFESORS, getProfesors)]);\n\n        case 2:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3);\n}\nexport default function mySaga() {\n  return _regeneratorRuntime.wrap(function mySaga$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return all([actionsWatcher()]);\n\n        case 2:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4);\n}","map":{"version":3,"sources":["D:/www/gits-proyectos/proyecto ERP/ERP V-2/ssr_server/public/src/sagas/index.js"],"names":["getUserAccess","getProfesors","actionsWatcher","mySaga","call","put","takeEvery","takeLatest","all","axios","Map","map","login","CALL_METRICS","CALL_USER_ACCESS","CALL_PROFESORS","setApiData","saveUserAccess","saveLoginError","saveProfesors","saveUserTokenAndDeleteOldErrors","config","action","console","log","post","apiKeyToken","response","data","error","newUserToken","query"],"mappings":";;oDAWiBA,a;qDA0BAC,Y;qDAUAC,c;qDAOQC,M;;AAtDzB,SAASC,IAAT,EAAeC,GAAf,EAAoBC,SAApB,EAA+BC,UAA/B,EAA2CC,GAA3C,QAAsD,oBAAtD;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,GAAG,IAAIC,GAAhB,QAA2B,WAA3B;AAEA,SAASC,KAAT,QAAsB,qBAAtB;AACA,SAASC,YAAT,EAAuBC,gBAAvB,EAAyCC,cAAzC,QAA+D,0BAA/D;AACA,SAASC,UAAT,EAAqBC,cAArB,EAAqCC,cAArC,EAAqDC,aAArD,EAAoEC,+BAApE,QAA2G,qBAA3G;AAEA,SAASC,MAAT,QAAuB,iBAAvB;AAGA,OAAO,SAAUrB,aAAV,CAAwBsB,MAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAECC,UAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ,EAFD,CAGC;;AAHD;AAIkB,iBAAMpB,IAAI,CAACK,KAAK,CAACgB,IAAN,CAAW,2BAAX,EAAwC;AAAEC,YAAAA,WAAW,EAAEL,MAAM,CAACK;AAAtB,WAAxC,CAAD,CAAV;;AAJlB;AAIOC,UAAAA,QAJP;;AAMC;;;;;;;;;;;AAWA;AACA;AACAJ,UAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAyBG,QAAQ,CAACC,IAAlC;AAnBD;AAqBC,iBAAMvB,GAAG,CAAEsB,QAAQ,CAACC,IAAT,CAAcC,KAAf,GAAwBX,cAAc,CAACS,QAAQ,CAACC,IAAT,CAAcC,KAAf,CAAtC,GAA8DT,+BAA+B,CAACO,QAAQ,CAACC,IAAT,CAAcE,YAAf,CAA9F,CAAT;;AArBD;AAAA;AAAA;;AAAA;AAAA;AAAA;AAuBCP,UAAAA,OAAO,CAACC,GAAR,CAAY,wCAAZ;;AAvBD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA0BP,OAAO,SAAUvB,YAAV,CAAuBqB,MAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEkB,iBAAMlB,IAAI,CAACK,KAAK,CAACgB,IAAP,mCAA8C;AAAEM,YAAAA,KAAK,EAAE;AAAT,WAA9C,CAAV;;AAFlB;AAEOJ,UAAAA,QAFP;AAAA;AAIC,iBAAMtB,GAAG,CAACc,aAAa,CAACR,GAAG,CAACgB,QAAQ,CAACC,IAAT,CAAcA,IAAf,CAAJ,CAAd,CAAT;;AAJD;AAAA;AAAA;;AAAA;AAAA;AAAA;AAMCL,UAAAA,OAAO,CAACC,GAAR,CAAY,yCAAZ;;AAND;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUP,OAAO,SAAUtB,cAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACH,iBAAMM,GAAG,CAAC,CACNF,SAAS,CAACQ,gBAAD,EAAmBd,aAAnB,CADH,EAENM,SAAS,CAACS,cAAD,EAAiBd,YAAjB,CAFH,CAAD,CAAT;;AADG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOP,eAAe,SAAUE,MAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACX,iBAAMK,GAAG,CAAC,CACNN,cAAc,EADR,CAAD,CAAT;;AADW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import { call, put, takeEvery, takeLatest, all } from 'redux-saga/effects';\r\nimport axios from 'axios';\r\nimport { Map as map } from 'immutable';\r\n\r\nimport { login } from '../../../utils/auth';\r\nimport { CALL_METRICS, CALL_USER_ACCESS, CALL_PROFESORS } from '../action-types/index.js';\r\nimport { setApiData, saveUserAccess, saveLoginError, saveProfesors, saveUserTokenAndDeleteOldErrors } from '../actions/index.js';\r\n\r\nimport { config } from '../../../config';\r\n\r\n\r\nexport function* getUserAccess(action) {\r\n    try {\r\n        console.log('antes del call');\r\n        //const response = yield call(axios.get, `http://localhost:8080/login/${action.payload.user}/${action.payload.password}`);\r\n        const response = yield call(axios.post('http://localhost:3000/api', { apiKeyToken: config.apiKeyToken }));\r\n\r\n        /*const apiCall = () => {\r\n            return axios.post('http://localhost:3000/api/auth/sign-in', { apiKeyToken: config.apiKeyToken }, {\r\n                auth: {\r\n                    email: action.payload.email,\r\n                    password: action.payload.password\r\n                }\r\n            }).then(response => response.data)\r\n                .catch(err => {\r\n                    throw err;\r\n                });\r\n        }*/\r\n        //if(response.data) login(response.data.newUserToken);\r\n        //yield put(saveUserAccess(map(response.data)));\r\n        console.log('resultado', response.data);\r\n\r\n        yield put((response.data.error) ? saveLoginError(response.data.error) : saveUserTokenAndDeleteOldErrors(response.data.newUserToken));\r\n    } catch (error) {\r\n        console.log('Request failed¡¡ error: ' + error);\r\n    }\r\n}\r\nexport function* getProfesors(action) {\r\n    try {\r\n        const response = yield call(axios.post, `http://localhost:5678/graphql`, { query: 'query Profesores{profesores {id,nombre,nacionalidad,genero,cursos {titulo,id}}}' });\r\n\r\n        yield put(saveProfesors(map(response.data.data)));\r\n    } catch (error) {\r\n        console.log('Request failed¡¡ error: ' + error);\r\n    }\r\n}\r\n\r\nexport function* actionsWatcher() {\r\n    yield all([\r\n        takeEvery(CALL_USER_ACCESS, getUserAccess),\r\n        takeEvery(CALL_PROFESORS, getProfesors)\r\n    ])\r\n}\r\n\r\nexport default function* mySaga() {\r\n    yield all([\r\n        actionsWatcher()\r\n    ])\r\n}"]},"metadata":{},"sourceType":"module"}