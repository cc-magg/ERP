{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"D:\\\\www\\\\gits-proyectos\\\\proyecto ERP\\\\ERP V-2\\\\ssr_server\\\\public\\\\src\\\\pages\\\\containers\\\\login.js\";\nvar __jsx = React.createElement;\n\nfunction _createSuper(Derived) { return function () { var Super = _getPrototypeOf(Derived), result; if (_isNativeReflectConstruct()) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { List as list, Map as map } from 'immutable';\nimport { bindActionCreators } from 'redux';\nimport Router from 'next/router';\nimport * as actions from '../../actions/index.js';\nimport Cookies from 'js-cookie';\nimport { logout, login } from '../../../../utils/auth';\nimport { RingLoader } from 'react-spinners';\nimport HandleErrorContainer from '../../components/error/container/handle-error.js'; //import LoginComponent from '../components/login';\n\nimport LoginComponent from '../components/loginComponent';\nimport Layout from '../components/loginLayout';\n/**lo mas seguro es que el usuario no tenga un token, en este caso solo es mostrar el formulario, pero,\r\n * en caso de que si tenga un token, se debe revisar y si ya no es valido entonces se muestra el formulario\r\n * si es valido entonces se muestra la vista de que ya esta logueado que si desea hacer logout\r\n */\n\nvar Login = /*#__PURE__*/function (_Component) {\n  _inherits(Login, _Component);\n\n  var _super = _createSuper(Login);\n\n  function Login() {\n    var _this;\n\n    _classCallCheck(this, Login);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      isLogued: false,\n      token: map(),\n      showSpinner: _this.props.showSpinner,\n      error: ''\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleLogout\", function () {\n      _this.props.actions.saveUserAccess('');\n\n      logout();\n    });\n\n    return _this;\n  }\n\n  _createClass(Login, [{\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      //console.log('entro en componentDidUpdate ');\n      //if the comoponent update because now the user is logued (from getDerivedStateFromProps validations)\n      //then here we create the cookie and redirect to /main\n      if (this.state.isLogued) {\n        login(this.props.token, '/main');\n      } else {\n        this.props.actions.saveUserAccess('');\n      } //console.log('salio de componentDidUpdate');\n\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var token2;\n      return _regeneratorRuntime.async(function componentDidMount$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              if (this.state.isLogued) {\n                _context.next = 5;\n                break;\n              }\n\n              _context.next = 3;\n              return _regeneratorRuntime.awrap(Cookies.get('token'));\n\n            case 3:\n              token2 = _context.sent;\n\n              if (token2) {\n                this.props.actions.saveUserAccess(token2);\n              }\n\n            case 5:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return __jsx(HandleErrorContainer, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 17\n        }\n      }, __jsx(Layout, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 13\n        }\n      }, this.state.showSpinner ? __jsx(\"div\", {\n        className: \"spinner\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 45\n        }\n      }, __jsx(RingLoader, {\n        loading: this.state.showSpinner,\n        color: \"#000000\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 21\n        }\n      })) : __jsx(LoginComponent, {\n        isLogued: this.state.isLogued,\n        logout: function logout() {\n          return _this2.handleLogout;\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 21\n        }\n      })));\n    }\n  }], [{\n    key: \"getDerivedStateFromProps\",\n    value: function getDerivedStateFromProps(props, state) {\n      //console.log('entro en getDerivedStateFromProps ');\n      var newState = {};\n\n      if (props.showSpinner != state.showSpinner) {\n        //console.log('getDerivedStateFromProps nuevo spinner '+props.showSpinner);\n        //en caso de que halla un cambio en el estado del spinner pues actualizamos su state\n        newState.showSpinner = props.showSpinner;\n      }\n\n      if (props.token != state.token) {\n        //if there is a new token in the store its validated, if valid then isLogued: true\n        //if not then the store token is removed\n        //console.log('getDerivedStateFromProps nuevo token '+props.token);\n        if (props.token.length > 0) {\n          if ('a' == 'a') {\n            //if the token is valid\n            console.log('isLogued = true');\n            newState.token = props.token;\n            newState.isLogued = true;\n          } else {\n            //if the token is not valid\n            console.log('isLogued = false');\n            newState.isLogued = false;\n          }\n        } else {\n          console.log('isLogued = false'); //if the token is empty\n\n          newState.isLogued = false;\n        }\n      }\n\n      if (props.error != state.error) {\n        //console.log('getDerivedStateFromProps nuevo error '+props.error);\n        //login returned error insted of token\n        newState.isLogued = false;\n      }\n\n      return Object.keys(newState).length ? newState : null;\n    }\n  }]);\n\n  return Login;\n}(Component);\n\nfunction mapStateToProps(state, props) {\n  var result = {}; //let token = state.get('user').get('access');\n  //console.log('mapStateToProps ERROR: ' + state.get('user').get('error'));\n\n  result.showSpinner = state.get('spinner').get('showSpinner');\n  result.error = state.get('user').get('error');\n  result.token = state.get('user').get('access');\n  return result;\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    actions: bindActionCreators(actions, dispatch)\n  };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Login);","map":{"version":3,"sources":["D:/www/gits-proyectos/proyecto ERP/ERP V-2/ssr_server/public/src/pages/containers/login.js"],"names":["React","Component","connect","List","list","Map","map","bindActionCreators","Router","actions","Cookies","logout","login","RingLoader","HandleErrorContainer","LoginComponent","Layout","Login","isLogued","token","showSpinner","props","error","saveUserAccess","state","get","token2","handleLogout","newState","length","console","log","Object","keys","mapStateToProps","result","mapDispatchToProps","dispatch"],"mappings":";;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,IAAI,IAAIC,IAAjB,EAAuBC,GAAG,IAAIC,GAA9B,QAAyC,WAAzC;AACA,SAASC,kBAAT,QAAmC,OAAnC;AACA,OAAOC,MAAP,MAAmB,aAAnB;AACA,OAAO,KAAKC,OAAZ,MAAyB,wBAAzB;AACA,OAAOC,OAAP,MAAoB,WAApB;AACA,SAASC,MAAT,EAAiBC,KAAjB,QAA8B,wBAA9B;AAEA,SAASC,UAAT,QAA2B,gBAA3B;AACA,OAAOC,oBAAP,MAAiC,kDAAjC,C,CACA;;AACA,OAAOC,cAAP,MAA2B,8BAA3B;AACA,OAAOC,MAAP,MAAmB,2BAAnB;AAEA;;;;;IAKMC,K;;;;;;;;;;;;;;;;4DAGM;AACJC,MAAAA,QAAQ,EAAE,KADN;AAEJC,MAAAA,KAAK,EAAEb,GAAG,EAFN;AAGJc,MAAAA,WAAW,EAAE,MAAKC,KAAL,CAAWD,WAHpB;AAIJE,MAAAA,KAAK,EAAE;AAJH,K;;mEAMO,YAAM;AACjB,YAAKD,KAAL,CAAWZ,OAAX,CAAmBc,cAAnB,CAAkC,EAAlC;;AACAZ,MAAAA,MAAM;AACT,K;;;;;;;yCACoB;AACjB;AACA;AACA;AACA,UAAI,KAAKa,KAAL,CAAWN,QAAf,EAAyB;AACrBN,QAAAA,KAAK,CAAC,KAAKS,KAAL,CAAWF,KAAZ,EAAmB,OAAnB,CAAL;AACH,OAFD,MAEO;AACH,aAAKE,KAAL,CAAWZ,OAAX,CAAmBc,cAAnB,CAAkC,EAAlC;AACH,OARgB,CASjB;;AACH;;;;;;;;;kBAKQ,KAAKC,KAAL,CAAWN,Q;;;;;;+CACSR,OAAO,CAACe,GAAR,CAAY,OAAZ,C;;;AAAfC,cAAAA,M;;AACN,kBAAIA,MAAJ,EAAY;AACR,qBAAKL,KAAL,CAAWZ,OAAX,CAAmBc,cAAnB,CAAkCG,MAAlC;AACH;;;;;;;;;;;6BAuCA;AAAA;;AACL,aAAQ,MAAC,oBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACJ,MAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACM,KAAKF,KAAL,CAAWJ,WAAZ,GAA2B;AAAK,QAAA,SAAS,EAAC,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACxB,MAAC,UAAD;AAAY,QAAA,OAAO,EAAE,KAAKI,KAAL,CAAWJ,WAAhC;AAA6C,QAAA,KAAK,EAAC,SAAnD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADwB,CAA3B,GAEG,MAAC,cAAD;AACI,QAAA,QAAQ,EAAE,KAAKI,KAAL,CAAWN,QADzB;AAEI,QAAA,MAAM,EAAE;AAAA,iBAAM,MAAI,CAACS,YAAX;AAAA,SAFZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAHR,CADI,CAAR;AAUH;;;6CA/C+BN,K,EAAOG,K,EAAO;AAC1C;AACA,UAAII,QAAQ,GAAG,EAAf;;AACA,UAAIP,KAAK,CAACD,WAAN,IAAqBI,KAAK,CAACJ,WAA/B,EAA4C;AACxC;AACA;AACAQ,QAAAA,QAAQ,CAACR,WAAT,GAAuBC,KAAK,CAACD,WAA7B;AACH;;AACD,UAAIC,KAAK,CAACF,KAAN,IAAeK,KAAK,CAACL,KAAzB,EAAgC;AAC5B;AACA;AACA;AACA,YAAIE,KAAK,CAACF,KAAN,CAAYU,MAAZ,GAAqB,CAAzB,EAA4B;AACxB,cAAI,OAAO,GAAX,EAAgB;AACZ;AACAC,YAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ;AACAH,YAAAA,QAAQ,CAACT,KAAT,GAAiBE,KAAK,CAACF,KAAvB;AACAS,YAAAA,QAAQ,CAACV,QAAT,GAAoB,IAApB;AACH,WALD,MAKO;AACH;AACAY,YAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ;AACAH,YAAAA,QAAQ,CAACV,QAAT,GAAoB,KAApB;AACH;AACJ,SAXD,MAWO;AACHY,UAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ,EADG,CAEH;;AACAH,UAAAA,QAAQ,CAACV,QAAT,GAAoB,KAApB;AACH;AACJ;;AACD,UAAIG,KAAK,CAACC,KAAN,IAAeE,KAAK,CAACF,KAAzB,EAAgC;AAC5B;AACA;AACAM,QAAAA,QAAQ,CAACV,QAAT,GAAoB,KAApB;AACH;;AACD,aAAOc,MAAM,CAACC,IAAP,CAAYL,QAAZ,EAAsBC,MAAtB,GAA+BD,QAA/B,GAA0C,IAAjD;AACH;;;;EAtEe3B,S;;AAqFpB,SAASiC,eAAT,CAAyBV,KAAzB,EAAgCH,KAAhC,EAAuC;AACnC,MAAIc,MAAM,GAAG,EAAb,CADmC,CAEnC;AAEA;;AACAA,EAAAA,MAAM,CAACf,WAAP,GAAqBI,KAAK,CAACC,GAAN,CAAU,SAAV,EAAqBA,GAArB,CAAyB,aAAzB,CAArB;AACAU,EAAAA,MAAM,CAACb,KAAP,GAAeE,KAAK,CAACC,GAAN,CAAU,MAAV,EAAkBA,GAAlB,CAAsB,OAAtB,CAAf;AACAU,EAAAA,MAAM,CAAChB,KAAP,GAAeK,KAAK,CAACC,GAAN,CAAU,MAAV,EAAkBA,GAAlB,CAAsB,QAAtB,CAAf;AAEA,SAAOU,MAAP;AACH;;AACD,SAASC,kBAAT,CAA4BC,QAA5B,EAAsC;AAClC,SAAO;AACH5B,IAAAA,OAAO,EAAEF,kBAAkB,CAACE,OAAD,EAAU4B,QAAV;AADxB,GAAP;AAGH;;AAED,eAAenC,OAAO,CAACgC,eAAD,EAAkBE,kBAAlB,CAAP,CAA6CnB,KAA7C,CAAf","sourcesContent":["import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { List as list, Map as map } from 'immutable';\r\nimport { bindActionCreators } from 'redux';\r\nimport Router from 'next/router';\r\nimport * as actions from '../../actions/index.js';\r\nimport Cookies from 'js-cookie';\r\nimport { logout, login } from '../../../../utils/auth';\r\n\r\nimport { RingLoader } from 'react-spinners';\r\nimport HandleErrorContainer from '../../components/error/container/handle-error.js';\r\n//import LoginComponent from '../components/login';\r\nimport LoginComponent from '../components/loginComponent';\r\nimport Layout from '../components/loginLayout';\r\n\r\n/**lo mas seguro es que el usuario no tenga un token, en este caso solo es mostrar el formulario, pero,\r\n * en caso de que si tenga un token, se debe revisar y si ya no es valido entonces se muestra el formulario\r\n * si es valido entonces se muestra la vista de que ya esta logueado que si desea hacer logout\r\n */\r\n\r\nclass Login extends Component {\r\n    //the form call an action wich ask the token and then saves it in the redux store as 'access'\r\n    //and mapStateToProps renames it as 'token'\r\n    state = {\r\n        isLogued: false,\r\n        token: map(),\r\n        showSpinner: this.props.showSpinner,\r\n        error: ''\r\n    }\r\n    handleLogout = () => {\r\n        this.props.actions.saveUserAccess('');\r\n        logout();\r\n    }\r\n    componentDidUpdate() {\r\n        //console.log('entro en componentDidUpdate ');\r\n        //if the comoponent update because now the user is logued (from getDerivedStateFromProps validations)\r\n        //then here we create the cookie and redirect to /main\r\n        if (this.state.isLogued) {\r\n            login(this.props.token, '/main');\r\n        } else {\r\n            this.props.actions.saveUserAccess('');\r\n        }\r\n        //console.log('salio de componentDidUpdate');\r\n    }\r\n    async componentDidMount() {\r\n        //console.log('entro en componentDidMount ');\r\n        //on page load check, if there was already a cookie token then it's saved in the store so that\r\n        //getDerivedStateFromProps can validate it\r\n        if (!this.state.isLogued) {\r\n            const token2 = await Cookies.get('token');\r\n            if (token2) {\r\n                this.props.actions.saveUserAccess(token2);\r\n            }\r\n        }\r\n    }\r\n    static getDerivedStateFromProps(props, state) {\r\n        //console.log('entro en getDerivedStateFromProps ');\r\n        let newState = {};\r\n        if (props.showSpinner != state.showSpinner) {\r\n            //console.log('getDerivedStateFromProps nuevo spinner '+props.showSpinner);\r\n            //en caso de que halla un cambio en el estado del spinner pues actualizamos su state\r\n            newState.showSpinner = props.showSpinner;\r\n        }\r\n        if (props.token != state.token) {\r\n            //if there is a new token in the store its validated, if valid then isLogued: true\r\n            //if not then the store token is removed\r\n            //console.log('getDerivedStateFromProps nuevo token '+props.token);\r\n            if (props.token.length > 0) {\r\n                if ('a' == 'a') {\r\n                    //if the token is valid\r\n                    console.log('isLogued = true');\r\n                    newState.token = props.token;\r\n                    newState.isLogued = true;\r\n                } else {\r\n                    //if the token is not valid\r\n                    console.log('isLogued = false');\r\n                    newState.isLogued = false;\r\n                }\r\n            } else {\r\n                console.log('isLogued = false');\r\n                //if the token is empty\r\n                newState.isLogued = false;\r\n            }\r\n        }\r\n        if (props.error != state.error) {\r\n            //console.log('getDerivedStateFromProps nuevo error '+props.error);\r\n            //login returned error insted of token\r\n            newState.isLogued = false;\r\n        }\r\n        return Object.keys(newState).length ? newState : null;\r\n    }\r\n    render() {\r\n        return (<HandleErrorContainer>\r\n            <Layout>\r\n                {(this.state.showSpinner) ? <div className=\"spinner\">\r\n                    <RingLoader loading={this.state.showSpinner} color='#000000' /></div> :\r\n                    <LoginComponent\r\n                        isLogued={this.state.isLogued}\r\n                        logout={() => this.handleLogout}\r\n                    />}\r\n            </Layout>\r\n        </HandleErrorContainer>)\r\n    }\r\n}\r\n\r\nfunction mapStateToProps(state, props) {\r\n    let result = {};\r\n    //let token = state.get('user').get('access');\r\n\r\n    //console.log('mapStateToProps ERROR: ' + state.get('user').get('error'));\r\n    result.showSpinner = state.get('spinner').get('showSpinner');\r\n    result.error = state.get('user').get('error');\r\n    result.token = state.get('user').get('access');\r\n\r\n    return result;\r\n}\r\nfunction mapDispatchToProps(dispatch) {\r\n    return {\r\n        actions: bindActionCreators(actions, dispatch)\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Login);"]},"metadata":{},"sourceType":"module"}