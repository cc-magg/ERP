{"ast":null,"code":"import Router from 'next/router';\nimport nextCookie from 'next-cookies';\nimport Cookies from 'js-cookie';\nexport var auth = function auth(ctx) {\n  //en caso de que ya tenga un token pues deberiamos validarlo a la api para ver si aun es valido\n  //en caso de que si sea valido entonces se muestra la web\n  //en caso de que no sea valido o no tenga token pues se muestra el login\n  var _nextCookie = nextCookie(ctx),\n      token = _nextCookie.token;\n\n  console.log('desde auth: req = ' + ctx.req + ' token = ' + token);\n\n  if (ctx.req && !token) {\n    ctx.res.writeHead(302, {\n      Location: '/login'\n    }).end();\n  }\n\n  if (!token) {\n    Router.push(\"/login\");\n  }\n\n  return token;\n};\nexport var logout = function logout() {\n  Cookies.remove('token'); //there is an explanention for why we use localstorage in the localstorage event listener\n  //To trigger the event listener we save some random data into the `logout` key, the triggered event must be in each page componentwillmount and componentdidmount\n\n  window.localStorage.setItem(\"logout\", Date.now());\n  Router.push(\"/login\");\n};\nexport var login = function login(token, redirectTo) {\n  //expires set the amount of days to expire\n  Cookies.set(\"token\", token, {\n    expires: 1\n  }); //console.log('from auth: redirecTo: '+redirectTo+' '+Cookies.get('token'));\n\n  Router.push(redirectTo);\n};\nexport var getSessionToken = function getSessionToken() {\n  return Cookies.get('token');\n};\nexport var validateToken = function validateToken() {\n  if (Cookies.get('token')) return true; //here we make a request to the api to know if the token is still valid or not\n\n  return false;\n};","map":{"version":3,"sources":["D:/www/gits-proyectos/proyecto ERP/ERP V-2/ssr_server/utils/auth.js"],"names":["Router","nextCookie","Cookies","auth","ctx","token","console","log","req","res","writeHead","Location","end","push","logout","remove","window","localStorage","setItem","Date","now","login","redirectTo","set","expires","getSessionToken","get","validateToken"],"mappings":"AAAA,OAAOA,MAAP,MAAmB,aAAnB;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,OAAOC,OAAP,MAAoB,WAApB;AAEA,OAAO,IAAMC,IAAI,GAAG,SAAPA,IAAO,CAAAC,GAAG,EAAI;AACvB;AACA;AACA;AAHuB,oBAILH,UAAU,CAACG,GAAD,CAJL;AAAA,MAIfC,KAJe,eAIfA,KAJe;;AAKvBC,EAAAA,OAAO,CAACC,GAAR,CAAY,uBAAuBH,GAAG,CAACI,GAA3B,GAAiC,WAAjC,GAA+CH,KAA3D;;AACA,MAAID,GAAG,CAACI,GAAJ,IAAW,CAACH,KAAhB,EAAuB;AACnBD,IAAAA,GAAG,CAACK,GAAJ,CAAQC,SAAR,CAAkB,GAAlB,EAAuB;AAAEC,MAAAA,QAAQ,EAAE;AAAZ,KAAvB,EAA+CC,GAA/C;AACH;;AAED,MAAI,CAACP,KAAL,EAAY;AACRL,IAAAA,MAAM,CAACa,IAAP,CAAY,QAAZ;AACH;;AAED,SAAOR,KAAP;AACH,CAfM;AAiBP,OAAO,IAAMS,MAAM,GAAG,SAATA,MAAS,GAAM;AACxBZ,EAAAA,OAAO,CAACa,MAAR,CAAe,OAAf,EADwB,CAExB;AACA;;AACAC,EAAAA,MAAM,CAACC,YAAP,CAAoBC,OAApB,CAA4B,QAA5B,EAAsCC,IAAI,CAACC,GAAL,EAAtC;AACApB,EAAAA,MAAM,CAACa,IAAP,CAAY,QAAZ;AACH,CANM;AAQP,OAAO,IAAMQ,KAAK,GAAG,SAARA,KAAQ,CAAChB,KAAD,EAAQiB,UAAR,EAAuB;AACxC;AACApB,EAAAA,OAAO,CAACqB,GAAR,CAAY,OAAZ,EAAqBlB,KAArB,EAA4B;AAAEmB,IAAAA,OAAO,EAAE;AAAX,GAA5B,EAFwC,CAGxC;;AACAxB,EAAAA,MAAM,CAACa,IAAP,CAAYS,UAAZ;AACH,CALM;AAOP,OAAO,IAAMG,eAAe,GAAG,SAAlBA,eAAkB;AAAA,SAAMvB,OAAO,CAACwB,GAAR,CAAY,OAAZ,CAAN;AAAA,CAAxB;AAEP,OAAO,IAAMC,aAAa,GAAG,SAAhBA,aAAgB,GAAM;AAC/B,MAAIzB,OAAO,CAACwB,GAAR,CAAY,OAAZ,CAAJ,EAA0B,OAAO,IAAP,CADK,CAE/B;;AACA,SAAO,KAAP;AACH,CAJM","sourcesContent":["import Router from 'next/router';\r\nimport nextCookie from 'next-cookies';\r\nimport Cookies from 'js-cookie';\r\n\r\nexport const auth = ctx => {\r\n    //en caso de que ya tenga un token pues deberiamos validarlo a la api para ver si aun es valido\r\n    //en caso de que si sea valido entonces se muestra la web\r\n    //en caso de que no sea valido o no tenga token pues se muestra el login\r\n    const { token } = nextCookie(ctx);\r\n    console.log('desde auth: req = ' + ctx.req + ' token = ' + token);\r\n    if (ctx.req && !token) {\r\n        ctx.res.writeHead(302, { Location: '/login' }).end();\r\n    }\r\n\r\n    if (!token) {\r\n        Router.push(\"/login\");\r\n    }\r\n\r\n    return token;\r\n};\r\n\r\nexport const logout = () => {\r\n    Cookies.remove('token');\r\n    //there is an explanention for why we use localstorage in the localstorage event listener\r\n    //To trigger the event listener we save some random data into the `logout` key, the triggered event must be in each page componentwillmount and componentdidmount\r\n    window.localStorage.setItem(\"logout\", Date.now());\r\n    Router.push(\"/login\");\r\n};\r\n\r\nexport const login = (token, redirectTo) => {\r\n    //expires set the amount of days to expire\r\n    Cookies.set(\"token\", token, { expires: 1 });\r\n    //console.log('from auth: redirecTo: '+redirectTo+' '+Cookies.get('token'));\r\n    Router.push(redirectTo);\r\n};\r\n\r\nexport const getSessionToken = () => Cookies.get('token');\r\n\r\nexport const validateToken = () => {\r\n    if (Cookies.get('token')) return true;\r\n    //here we make a request to the api to know if the token is still valid or not\r\n    return false;\r\n};"]},"metadata":{},"sourceType":"module"}