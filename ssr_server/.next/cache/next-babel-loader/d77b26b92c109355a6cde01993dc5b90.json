{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"D:\\\\www\\\\gits-proyectos\\\\proyecto ERP\\\\ERP V-2\\\\ssr_server\\\\pages\\\\index.js\";\nvar __jsx = React.createElement;\n\nfunction _createSuper(Derived) { return function () { var Super = _getPrototypeOf(Derived), result; if (_isNativeReflectConstruct()) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from \"react\";\nimport { initStore } from '../store';\nimport Router from 'next/router';\nimport { Map as map } from 'immutable';\nimport { bindActionCreators } from \"redux\";\nimport * as actions from '../public/src/actions/index'; //import components\n\nimport Home from '../public/src/pages/containers/home';\nimport { LocalStorageCheckForThis, LocalStorageGetData, LocalStorageRemoveItem } from '../localStorageOptions';\n\nvar HomePage = /*#__PURE__*/function (_Component) {\n  _inherits(HomePage, _Component);\n\n  var _super = _createSuper(HomePage);\n\n  function HomePage() {\n    _classCallCheck(this, HomePage);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(HomePage, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this = this;\n\n      /*if(LocalStorageCheckForThis('access') && this.props.result.size == 0) {\r\n          let access = LocalStorageGetData('access');\r\n          this.props.actions.saveUserAccess(map(JSON.parse(access)));\r\n      }*/\n      //here we use the localstorage eventlistener so that every tab from the browser listen when the logout is being called and then\n      //it redirects to login all tabs from the browser (this event is called after the cookie.remove() so the login will show the form for every tab)\n      //Add event listener when a restricted Page Component mounts\n      window.addEventListener('storage', function (event) {\n        if (event.key === 'logout') {\n          _this.props.actions.saveUserAccess('');\n\n          Router.push('/login');\n        }\n      }); //navegation Events\n\n      Router.onRouteChangeStart = function (url) {\n        console.log('App is changing to: ', url);\n\n        _this.props.actions.showSpinner(true);\n      };\n\n      Router.onRouteChangeComplete = function (url) {\n        console.log('App changed to: ', url);\n\n        _this.props.actions.showSpinner(false);\n      };\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      var _this2 = this;\n\n      //Remove event listener when the Component unmount and delete all data\n      //the second parameter must be the same as the window.addEventListener second parameter for it to work\n      window.removeEventListener('storage', function (event) {\n        if (event.key === 'logout') {\n          _this2.props.actions.saveUserAccess('');\n\n          Router.push('/login');\n        }\n      });\n      window.localStorage.removeItem('logout');\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return __jsx(Home, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 17\n        }\n      });\n    }\n  }]);\n\n  return HomePage;\n}(Component);\n\nfunction mapStateToProps(state, props) {\n  /*let result = map();\r\n  let access = state.get('user').get('access');\r\n  if(access != ''){\r\n      result = access;\r\n  }\r\n  return {\r\n      result\r\n  }*/\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    actions: bindActionCreators(actions, dispatch)\n  };\n}\n\nexport default initStore(HomePage, '', mapDispatchToProps, 'HOME');","map":{"version":3,"sources":["D:/www/gits-proyectos/proyecto ERP/ERP V-2/ssr_server/pages/index.js"],"names":["React","Component","initStore","Router","Map","map","bindActionCreators","actions","Home","LocalStorageCheckForThis","LocalStorageGetData","LocalStorageRemoveItem","HomePage","window","addEventListener","event","key","props","saveUserAccess","push","onRouteChangeStart","url","console","log","showSpinner","onRouteChangeComplete","removeEventListener","localStorage","removeItem","mapStateToProps","state","mapDispatchToProps","dispatch"],"mappings":";;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,SAAT,QAA0B,UAA1B;AACA,OAAOC,MAAP,MAAmB,aAAnB;AACA,SAASC,GAAG,IAAIC,GAAhB,QAA2B,WAA3B;AACA,SAASC,kBAAT,QAAmC,OAAnC;AACA,OAAO,KAAKC,OAAZ,MAAyB,6BAAzB,C,CAEA;;AACA,OAAOC,IAAP,MAAiB,qCAAjB;AAEA,SACIC,wBADJ,EAEIC,mBAFJ,EAGIC,sBAHJ,QAIO,wBAJP;;IAMMC,Q;;;;;;;;;;;;;wCACkB;AAAA;;AAChB;;;;AAIA;AACA;AACA;AACAC,MAAAA,MAAM,CAACC,gBAAP,CAAwB,SAAxB,EAAmC,UAAAC,KAAK,EAAI;AACxC,YAAIA,KAAK,CAACC,GAAN,KAAc,QAAlB,EAA4B;AACxB,UAAA,KAAI,CAACC,KAAL,CAAWV,OAAX,CAAmBW,cAAnB,CAAkC,EAAlC;;AACAf,UAAAA,MAAM,CAACgB,IAAP,CAAY,QAAZ;AACH;AACJ,OALD,EARgB,CAchB;;AACAhB,MAAAA,MAAM,CAACiB,kBAAP,GAA4B,UAAAC,GAAG,EAAI;AAC/BC,QAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ,EAAoCF,GAApC;;AACA,QAAA,KAAI,CAACJ,KAAL,CAAWV,OAAX,CAAmBiB,WAAnB,CAA+B,IAA/B;AACH,OAHD;;AAIArB,MAAAA,MAAM,CAACsB,qBAAP,GAA+B,UAAAJ,GAAG,EAAI;AAClCC,QAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ,EAAgCF,GAAhC;;AACA,QAAA,KAAI,CAACJ,KAAL,CAAWV,OAAX,CAAmBiB,WAAnB,CAA+B,KAA/B;AACH,OAHD;AAIH;;;2CACsB;AAAA;;AACnB;AACA;AACAX,MAAAA,MAAM,CAACa,mBAAP,CAA2B,SAA3B,EAAsC,UAAAX,KAAK,EAAI;AAC3C,YAAIA,KAAK,CAACC,GAAN,KAAc,QAAlB,EAA4B;AACxB,UAAA,MAAI,CAACC,KAAL,CAAWV,OAAX,CAAmBW,cAAnB,CAAkC,EAAlC;;AACAf,UAAAA,MAAM,CAACgB,IAAP,CAAY,QAAZ;AACH;AACJ,OALD;AAMAN,MAAAA,MAAM,CAACc,YAAP,CAAoBC,UAApB,CAA+B,QAA/B;AACH;;;6BACQ;AACL,aAAQ,MAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAR;AACH;;;;EAtCkB3B,S;;AAwCvB,SAAS4B,eAAT,CAAyBC,KAAzB,EAAgCb,KAAhC,EAAuC;AACnC;;;;;;;;AAQH;;AACD,SAASc,kBAAT,CAA4BC,QAA5B,EAAsC;AAClC,SAAO;AACHzB,IAAAA,OAAO,EAAED,kBAAkB,CAACC,OAAD,EAAUyB,QAAV;AADxB,GAAP;AAGH;;AAED,eAAe9B,SAAS,CAACU,QAAD,EAAW,EAAX,EAAemB,kBAAf,EAAmC,MAAnC,CAAxB","sourcesContent":["import React, { Component } from \"react\";\r\nimport { initStore } from '../store';\r\nimport Router from 'next/router';\r\nimport { Map as map } from 'immutable';\r\nimport { bindActionCreators } from \"redux\";\r\nimport * as actions from '../public/src/actions/index';\r\n\r\n//import components\r\nimport Home from '../public/src/pages/containers/home';\r\n\r\nimport {\r\n    LocalStorageCheckForThis,\r\n    LocalStorageGetData,\r\n    LocalStorageRemoveItem\r\n} from '../localStorageOptions';\r\n\r\nclass HomePage extends Component {\r\n    componentDidMount() {\r\n        /*if(LocalStorageCheckForThis('access') && this.props.result.size == 0) {\r\n            let access = LocalStorageGetData('access');\r\n            this.props.actions.saveUserAccess(map(JSON.parse(access)));\r\n        }*/\r\n        //here we use the localstorage eventlistener so that every tab from the browser listen when the logout is being called and then\r\n        //it redirects to login all tabs from the browser (this event is called after the cookie.remove() so the login will show the form for every tab)\r\n        //Add event listener when a restricted Page Component mounts\r\n        window.addEventListener('storage', event => {\r\n            if (event.key === 'logout') {\r\n                this.props.actions.saveUserAccess('');\r\n                Router.push('/login');\r\n            }\r\n        });\r\n        //navegation Events\r\n        Router.onRouteChangeStart = url => {\r\n            console.log('App is changing to: ', url);\r\n            this.props.actions.showSpinner(true);\r\n        }\r\n        Router.onRouteChangeComplete = url => {\r\n            console.log('App changed to: ', url);\r\n            this.props.actions.showSpinner(false);\r\n        }\r\n    }\r\n    componentWillUnmount() {\r\n        //Remove event listener when the Component unmount and delete all data\r\n        //the second parameter must be the same as the window.addEventListener second parameter for it to work\r\n        window.removeEventListener('storage', event => {\r\n            if (event.key === 'logout') {\r\n                this.props.actions.saveUserAccess('');\r\n                Router.push('/login');\r\n            }\r\n        });\r\n        window.localStorage.removeItem('logout');\r\n    }\r\n    render() {\r\n        return (<Home />)\r\n    }\r\n}\r\nfunction mapStateToProps(state, props) {\r\n    /*let result = map();\r\n    let access = state.get('user').get('access');\r\n    if(access != ''){\r\n        result = access;\r\n    }\r\n    return {\r\n        result\r\n    }*/\r\n}\r\nfunction mapDispatchToProps(dispatch) {\r\n    return {\r\n        actions: bindActionCreators(actions, dispatch)\r\n    }\r\n}\r\n\r\nexport default initStore(HomePage, '', mapDispatchToProps, 'HOME')"]},"metadata":{},"sourceType":"module"}