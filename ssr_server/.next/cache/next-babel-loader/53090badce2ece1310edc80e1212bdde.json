{"ast":null,"code":"var _jsxFileName = \"D:\\\\www\\\\gits-proyectos\\\\proyecto ERP\\\\ERP V-2\\\\ssr_server\\\\public\\\\src\\\\pages\\\\containers\\\\login.js\";\nvar __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { List as list, Map as map } from 'immutable';\nimport { bindActionCreators } from 'redux';\nimport Router from 'next/router';\nimport * as actions from '../../actions/index.js';\nimport Cookies from 'js-cookie';\nimport { logout, login } from '../../../../utils/auth';\nimport { RingLoader } from 'react-spinners';\nimport HandleErrorContainer from '../../components/error/container/handle-error.js'; //import LoginComponent from '../components/login';\n\nimport LoginComponent from '../components/loginComponent';\nimport Layout from '../components/loginLayout';\n/**lo mas seguro es que el usuario no tenga un token, en este caso solo es mostrar el formulario, pero,\r\n * en caso de que si tenga un token, se debe revisar y si ya no es valido entonces se muestra el formulario\r\n * si es valido entonces se muestra la vista de que ya esta logueado que si desea hacer logout\r\n */\n\nclass Login extends Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      isLogued: false,\n      token: map(),\n      showSpinner: this.props.showSpinner,\n      error: ''\n    });\n\n    _defineProperty(this, \"handleLogout\", () => {\n      this.props.actions.saveUserAccess('');\n      logout();\n    });\n  }\n\n  componentDidUpdate() {\n    //console.log('entro en componentDidUpdate ');\n    //if the comoponent update because now the user is logued (from getDerivedStateFromProps validations)\n    //then here we create the cookie and redirect to /main\n    if (this.state.isLogued) {\n      login(this.props.token, '/main');\n    } else {\n      this.props.actions.saveUserAccess('');\n    } //console.log('salio de componentDidUpdate');\n\n  }\n\n  async componentDidMount() {\n    //console.log('entro en componentDidMount ');\n    //on page load check, if there was already a cookie token then it's saved in the store so that\n    //getDerivedStateFromProps can validate it\n    if (!this.state.isLogued) {\n      const token2 = await Cookies.get('token');\n\n      if (token2) {\n        this.props.actions.saveUserAccess(token2);\n      }\n    }\n  }\n\n  static getDerivedStateFromProps(props, state) {\n    //console.log('entro en getDerivedStateFromProps ');\n    let newState = {};\n\n    if (props.showSpinner != state.showSpinner) {\n      //console.log('getDerivedStateFromProps nuevo spinner '+props.showSpinner);\n      //en caso de que halla un cambio en el estado del spinner pues actualizamos su state\n      newState.showSpinner = props.showSpinner;\n    }\n\n    if (props.token != state.token) {\n      //if there is a new token in the store its validated, if valid then isLogued: true\n      //if not then the store token is removed\n      //console.log('getDerivedStateFromProps nuevo token '+props.token);\n      if (props.token.length > 0) {\n        if ('a' == 'a') {\n          //if the token is valid\n          console.log('isLogued = true');\n          newState.token = props.token;\n          newState.isLogued = true;\n        } else {\n          //if the token is not valid\n          console.log('isLogued = false');\n          newState.isLogued = false;\n        }\n      } else {\n        console.log('isLogued = false'); //if the token is empty\n\n        newState.isLogued = false;\n      }\n    }\n\n    if (props.error != state.error) {\n      //console.log('getDerivedStateFromProps nuevo error '+props.error);\n      //login returned error insted of token\n      newState.isLogued = false;\n    }\n\n    return Object.keys(newState).length ? newState : null;\n  }\n\n  render() {\n    return __jsx(HandleErrorContainer, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 17\n      }\n    }, __jsx(Layout, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 13\n      }\n    }, this.state.showSpinner ? __jsx(\"div\", {\n      className: \"spinner\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 45\n      }\n    }, __jsx(RingLoader, {\n      loading: this.state.showSpinner,\n      color: \"#000000\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 21\n      }\n    })) : __jsx(LoginComponent, {\n      isLogued: this.state.isLogued,\n      logout: () => this.handleLogout,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 21\n      }\n    })));\n  }\n\n}\n\nfunction mapStateToProps(state, props) {\n  let result = {}; //let token = state.get('user').get('access');\n  //console.log('mapStateToProps ERROR: ' + state.get('user').get('error'));\n\n  result.showSpinner = state.get('spinner').get('showSpinner');\n  result.error = state.get('user').get('error');\n  result.token = state.get('user').get('access');\n  return result;\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    actions: bindActionCreators(actions, dispatch)\n  };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Login);","map":{"version":3,"sources":["D:/www/gits-proyectos/proyecto ERP/ERP V-2/ssr_server/public/src/pages/containers/login.js"],"names":["React","Component","connect","List","list","Map","map","bindActionCreators","Router","actions","Cookies","logout","login","RingLoader","HandleErrorContainer","LoginComponent","Layout","Login","isLogued","token","showSpinner","props","error","saveUserAccess","componentDidUpdate","state","componentDidMount","token2","get","getDerivedStateFromProps","newState","length","console","log","Object","keys","render","handleLogout","mapStateToProps","result","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { List as list, Map as map } from 'immutable';\r\nimport { bindActionCreators } from 'redux';\r\nimport Router from 'next/router';\r\nimport * as actions from '../../actions/index.js';\r\nimport Cookies from 'js-cookie';\r\nimport { logout, login } from '../../../../utils/auth';\r\n\r\nimport { RingLoader } from 'react-spinners';\r\nimport HandleErrorContainer from '../../components/error/container/handle-error.js';\r\n//import LoginComponent from '../components/login';\r\nimport LoginComponent from '../components/loginComponent';\r\nimport Layout from '../components/loginLayout';\r\n\r\n/**lo mas seguro es que el usuario no tenga un token, en este caso solo es mostrar el formulario, pero,\r\n * en caso de que si tenga un token, se debe revisar y si ya no es valido entonces se muestra el formulario\r\n * si es valido entonces se muestra la vista de que ya esta logueado que si desea hacer logout\r\n */\r\n\r\nclass Login extends Component {\r\n    //the form call an action wich ask the token and then saves it in the redux store as 'access'\r\n    //and mapStateToProps renames it as 'token'\r\n    state = {\r\n        isLogued: false,\r\n        token: map(),\r\n        showSpinner: this.props.showSpinner,\r\n        error: ''\r\n    }\r\n    handleLogout = () => {\r\n        this.props.actions.saveUserAccess('');\r\n        logout();\r\n    }\r\n    componentDidUpdate() {\r\n        //console.log('entro en componentDidUpdate ');\r\n        //if the comoponent update because now the user is logued (from getDerivedStateFromProps validations)\r\n        //then here we create the cookie and redirect to /main\r\n        if (this.state.isLogued) {\r\n            login(this.props.token, '/main');\r\n        } else {\r\n            this.props.actions.saveUserAccess('');\r\n        }\r\n        //console.log('salio de componentDidUpdate');\r\n    }\r\n    async componentDidMount() {\r\n        //console.log('entro en componentDidMount ');\r\n        //on page load check, if there was already a cookie token then it's saved in the store so that\r\n        //getDerivedStateFromProps can validate it\r\n        if (!this.state.isLogued) {\r\n            const token2 = await Cookies.get('token');\r\n            if (token2) {\r\n                this.props.actions.saveUserAccess(token2);\r\n            }\r\n        }\r\n    }\r\n    static getDerivedStateFromProps(props, state) {\r\n        //console.log('entro en getDerivedStateFromProps ');\r\n        let newState = {};\r\n        if (props.showSpinner != state.showSpinner) {\r\n            //console.log('getDerivedStateFromProps nuevo spinner '+props.showSpinner);\r\n            //en caso de que halla un cambio en el estado del spinner pues actualizamos su state\r\n            newState.showSpinner = props.showSpinner;\r\n        }\r\n        if (props.token != state.token) {\r\n            //if there is a new token in the store its validated, if valid then isLogued: true\r\n            //if not then the store token is removed\r\n            //console.log('getDerivedStateFromProps nuevo token '+props.token);\r\n            if (props.token.length > 0) {\r\n                if ('a' == 'a') {\r\n                    //if the token is valid\r\n                    console.log('isLogued = true');\r\n                    newState.token = props.token;\r\n                    newState.isLogued = true;\r\n                } else {\r\n                    //if the token is not valid\r\n                    console.log('isLogued = false');\r\n                    newState.isLogued = false;\r\n                }\r\n            } else {\r\n                console.log('isLogued = false');\r\n                //if the token is empty\r\n                newState.isLogued = false;\r\n            }\r\n        }\r\n        if (props.error != state.error) {\r\n            //console.log('getDerivedStateFromProps nuevo error '+props.error);\r\n            //login returned error insted of token\r\n            newState.isLogued = false;\r\n        }\r\n        return Object.keys(newState).length ? newState : null;\r\n    }\r\n    render() {\r\n        return (<HandleErrorContainer>\r\n            <Layout>\r\n                {(this.state.showSpinner) ? <div className=\"spinner\">\r\n                    <RingLoader loading={this.state.showSpinner} color='#000000' /></div> :\r\n                    <LoginComponent\r\n                        isLogued={this.state.isLogued}\r\n                        logout={() => this.handleLogout}\r\n                    />}\r\n            </Layout>\r\n        </HandleErrorContainer>)\r\n    }\r\n}\r\n\r\nfunction mapStateToProps(state, props) {\r\n    let result = {};\r\n    //let token = state.get('user').get('access');\r\n\r\n    //console.log('mapStateToProps ERROR: ' + state.get('user').get('error'));\r\n    result.showSpinner = state.get('spinner').get('showSpinner');\r\n    result.error = state.get('user').get('error');\r\n    result.token = state.get('user').get('access');\r\n\r\n    return result;\r\n}\r\nfunction mapDispatchToProps(dispatch) {\r\n    return {\r\n        actions: bindActionCreators(actions, dispatch)\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Login);"]},"metadata":{},"sourceType":"module"}