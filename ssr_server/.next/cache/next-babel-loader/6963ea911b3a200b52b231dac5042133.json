{"ast":null,"code":"var _jsxFileName = \"D:\\\\www\\\\gits-proyectos\\\\proyecto ERP\\\\ERP V-2\\\\ssr_server\\\\pages\\\\index.js\";\nvar __jsx = React.createElement;\nimport React, { Component } from \"react\";\nimport { initStore } from '../store';\nimport Router from 'next/router';\nimport { Map as map } from 'immutable';\nimport { bindActionCreators } from \"redux\";\nimport * as actions from '../public/src/actions/index'; //import components\n\nimport Home from '../public/src/pages/containers/home';\nimport { LocalStorageCheckForThis, LocalStorageGetData, LocalStorageRemoveItem } from '../localStorageOptions';\n\nclass HomePage extends Component {\n  componentDidMount() {\n    /*if(LocalStorageCheckForThis('access') && this.props.result.size == 0) {\r\n        let access = LocalStorageGetData('access');\r\n        this.props.actions.saveUserAccess(map(JSON.parse(access)));\r\n    }*/\n    //here we use the localstorage eventlistener so that every tab from the browser listen when the logout is being called and then\n    //it redirects to login all tabs from the browser (this event is called after the cookie.remove() so the login will show the form for every tab)\n    //Add event listener when a restricted Page Component mounts\n    window.addEventListener('storage', event => {\n      if (event.key === 'logout') {\n        this.props.actions.saveUserAccess('');\n        Router.push('/login');\n      }\n    }); //navegation Events\n\n    Router.onRouteChangeStart = url => {\n      console.log('App is changing to: ', url);\n      this.props.actions.showSpinner(true);\n    };\n\n    Router.onRouteChangeComplete = url => {\n      console.log('App changed to: ', url);\n      this.props.actions.showSpinner(false);\n    };\n  }\n\n  componentWillUnmount() {\n    //Remove event listener when the Component unmount and delete all data\n    //the second parameter must be the same as the window.addEventListener second parameter for it to work\n    window.removeEventListener('storage', event => {\n      if (event.key === 'logout') {\n        this.props.actions.saveUserAccess('');\n        Router.push('/login');\n      }\n    });\n    window.localStorage.removeItem('logout');\n  }\n\n  render() {\n    return __jsx(Home, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 17\n      }\n    });\n  }\n\n}\n\nfunction mapStateToProps(state, props) {\n  /*let result = map();\r\n  let access = state.get('user').get('access');\r\n  if(access != ''){\r\n      result = access;\r\n  }\r\n  return {\r\n      result\r\n  }*/\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    actions: bindActionCreators(actions, dispatch)\n  };\n}\n\nexport default initStore(HomePage, '', mapDispatchToProps, 'HOME');","map":{"version":3,"sources":["D:/www/gits-proyectos/proyecto ERP/ERP V-2/ssr_server/pages/index.js"],"names":["React","Component","initStore","Router","Map","map","bindActionCreators","actions","Home","LocalStorageCheckForThis","LocalStorageGetData","LocalStorageRemoveItem","HomePage","componentDidMount","window","addEventListener","event","key","props","saveUserAccess","push","onRouteChangeStart","url","console","log","showSpinner","onRouteChangeComplete","componentWillUnmount","removeEventListener","localStorage","removeItem","render","mapStateToProps","state","mapDispatchToProps","dispatch"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,SAAT,QAA0B,UAA1B;AACA,OAAOC,MAAP,MAAmB,aAAnB;AACA,SAASC,GAAG,IAAIC,GAAhB,QAA2B,WAA3B;AACA,SAASC,kBAAT,QAAmC,OAAnC;AACA,OAAO,KAAKC,OAAZ,MAAyB,6BAAzB,C,CAEA;;AACA,OAAOC,IAAP,MAAiB,qCAAjB;AAEA,SACIC,wBADJ,EAEIC,mBAFJ,EAGIC,sBAHJ,QAIO,wBAJP;;AAMA,MAAMC,QAAN,SAAuBX,SAAvB,CAAiC;AAC7BY,EAAAA,iBAAiB,GAAG;AAChB;;;;AAIA;AACA;AACA;AACAC,IAAAA,MAAM,CAACC,gBAAP,CAAwB,SAAxB,EAAmCC,KAAK,IAAI;AACxC,UAAIA,KAAK,CAACC,GAAN,KAAc,QAAlB,EAA4B;AACxB,aAAKC,KAAL,CAAWX,OAAX,CAAmBY,cAAnB,CAAkC,EAAlC;AACAhB,QAAAA,MAAM,CAACiB,IAAP,CAAY,QAAZ;AACH;AACJ,KALD,EARgB,CAchB;;AACAjB,IAAAA,MAAM,CAACkB,kBAAP,GAA4BC,GAAG,IAAI;AAC/BC,MAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ,EAAoCF,GAApC;AACA,WAAKJ,KAAL,CAAWX,OAAX,CAAmBkB,WAAnB,CAA+B,IAA/B;AACH,KAHD;;AAIAtB,IAAAA,MAAM,CAACuB,qBAAP,GAA+BJ,GAAG,IAAI;AAClCC,MAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ,EAAgCF,GAAhC;AACA,WAAKJ,KAAL,CAAWX,OAAX,CAAmBkB,WAAnB,CAA+B,KAA/B;AACH,KAHD;AAIH;;AACDE,EAAAA,oBAAoB,GAAG;AACnB;AACA;AACAb,IAAAA,MAAM,CAACc,mBAAP,CAA2B,SAA3B,EAAsCZ,KAAK,IAAI;AAC3C,UAAIA,KAAK,CAACC,GAAN,KAAc,QAAlB,EAA4B;AACxB,aAAKC,KAAL,CAAWX,OAAX,CAAmBY,cAAnB,CAAkC,EAAlC;AACAhB,QAAAA,MAAM,CAACiB,IAAP,CAAY,QAAZ;AACH;AACJ,KALD;AAMAN,IAAAA,MAAM,CAACe,YAAP,CAAoBC,UAApB,CAA+B,QAA/B;AACH;;AACDC,EAAAA,MAAM,GAAG;AACL,WAAQ,MAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAR;AACH;;AAtC4B;;AAwCjC,SAASC,eAAT,CAAyBC,KAAzB,EAAgCf,KAAhC,EAAuC;AACnC;;;;;;;;AAQH;;AACD,SAASgB,kBAAT,CAA4BC,QAA5B,EAAsC;AAClC,SAAO;AACH5B,IAAAA,OAAO,EAAED,kBAAkB,CAACC,OAAD,EAAU4B,QAAV;AADxB,GAAP;AAGH;;AAED,eAAejC,SAAS,CAACU,QAAD,EAAW,EAAX,EAAesB,kBAAf,EAAmC,MAAnC,CAAxB","sourcesContent":["import React, { Component } from \"react\";\r\nimport { initStore } from '../store';\r\nimport Router from 'next/router';\r\nimport { Map as map } from 'immutable';\r\nimport { bindActionCreators } from \"redux\";\r\nimport * as actions from '../public/src/actions/index';\r\n\r\n//import components\r\nimport Home from '../public/src/pages/containers/home';\r\n\r\nimport {\r\n    LocalStorageCheckForThis,\r\n    LocalStorageGetData,\r\n    LocalStorageRemoveItem\r\n} from '../localStorageOptions';\r\n\r\nclass HomePage extends Component {\r\n    componentDidMount() {\r\n        /*if(LocalStorageCheckForThis('access') && this.props.result.size == 0) {\r\n            let access = LocalStorageGetData('access');\r\n            this.props.actions.saveUserAccess(map(JSON.parse(access)));\r\n        }*/\r\n        //here we use the localstorage eventlistener so that every tab from the browser listen when the logout is being called and then\r\n        //it redirects to login all tabs from the browser (this event is called after the cookie.remove() so the login will show the form for every tab)\r\n        //Add event listener when a restricted Page Component mounts\r\n        window.addEventListener('storage', event => {\r\n            if (event.key === 'logout') {\r\n                this.props.actions.saveUserAccess('');\r\n                Router.push('/login');\r\n            }\r\n        });\r\n        //navegation Events\r\n        Router.onRouteChangeStart = url => {\r\n            console.log('App is changing to: ', url);\r\n            this.props.actions.showSpinner(true);\r\n        }\r\n        Router.onRouteChangeComplete = url => {\r\n            console.log('App changed to: ', url);\r\n            this.props.actions.showSpinner(false);\r\n        }\r\n    }\r\n    componentWillUnmount() {\r\n        //Remove event listener when the Component unmount and delete all data\r\n        //the second parameter must be the same as the window.addEventListener second parameter for it to work\r\n        window.removeEventListener('storage', event => {\r\n            if (event.key === 'logout') {\r\n                this.props.actions.saveUserAccess('');\r\n                Router.push('/login');\r\n            }\r\n        });\r\n        window.localStorage.removeItem('logout');\r\n    }\r\n    render() {\r\n        return (<Home />)\r\n    }\r\n}\r\nfunction mapStateToProps(state, props) {\r\n    /*let result = map();\r\n    let access = state.get('user').get('access');\r\n    if(access != ''){\r\n        result = access;\r\n    }\r\n    return {\r\n        result\r\n    }*/\r\n}\r\nfunction mapDispatchToProps(dispatch) {\r\n    return {\r\n        actions: bindActionCreators(actions, dispatch)\r\n    }\r\n}\r\n\r\nexport default initStore(HomePage, '', mapDispatchToProps, 'HOME')"]},"metadata":{},"sourceType":"module"}