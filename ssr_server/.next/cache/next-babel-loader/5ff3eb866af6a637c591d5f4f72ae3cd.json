{"ast":null,"code":"import { call, put, takeEvery, takeLatest, all } from 'redux-saga/effects';\nimport axios from 'axios';\nimport { Map as map } from 'immutable';\nimport { login } from '../../../utils/auth';\nimport { CALL_METRICS, CALL_USER_ACCESS, CALL_PROFESORS } from '../action-types/index.js';\nimport { setApiData, saveUserAccess, saveLoginError, saveProfesors, saveUserTokenAndDeleteOldErrors } from '../actions/index.js';\nimport { config } from '../../../config'; //import token from '../../../config';\n\n/*export function* getMetrics(action) {\r\n    try {\r\n        const headers = {\r\n            method: 'GET',\r\n            mode: 'no-cors',\r\n            headers: {\r\n                'Authorization': `Bearer ${token.apiToken}`, // Need to get from store once login done\r\n                'Content-Type': 'application/json'\r\n            },\r\n        };\r\n        const response = yield call(axios.get, `http://localhost:8080/metrics/${action.payload.uuid}/${action.payload.type}`, headers);\r\n\r\n        yield put(setApiData(response.data));\r\n    } catch (error) {\r\n        console.log('Request failed at metrics¡¡ error: ' + error);\r\n    }\r\n}*/\n\nexport function* getUserAccess(action) {\n  try {\n    //const response = yield call(axios.get, `http://localhost:8080/login/${action.payload.user}/${action.payload.password}`);\n    const response = yield call(axios.post('http://localhost:3000/api/auth/sign-in', {\n      apiKeyToken: config.apiKeyToken\n    }, {\n      auth: {\n        email: action.payload.email,\n        password: action.payload.password\n      }\n    }));\n    /*const apiCall = () => {\r\n        return axios.post('http://localhost:3000/api/auth/sign-in', { apiKeyToken: config.apiKeyToken }, {\r\n            auth: {\r\n                email: action.payload.email,\r\n                password: action.payload.password\r\n            }\r\n        }).then(response => response.data)\r\n            .catch(err => {\r\n                throw err;\r\n            });\r\n    }*/\n    //if(response.data) login(response.data.newUserToken);\n    //yield put(saveUserAccess(map(response.data)));\n\n    console.log('resultado', response.data);\n    yield put(response.data.error ? saveLoginError(response.data.error) : saveUserTokenAndDeleteOldErrors(response.data.newUserToken));\n  } catch (error) {\n    console.log('Request failed¡¡ error: ' + error);\n  }\n}\nexport function* getProfesors(action) {\n  try {\n    const response = yield call(axios.post, `http://localhost:5678/graphql`, {\n      query: 'query Profesores{profesores {id,nombre,nacionalidad,genero,cursos {titulo,id}}}'\n    });\n    yield put(saveProfesors(map(response.data.data)));\n  } catch (error) {\n    console.log('Request failed¡¡ error: ' + error);\n  }\n}\nexport function* actionsWatcher() {\n  yield all([takeEvery(CALL_METRICS, getMetrics), takeEvery(CALL_USER_ACCESS, getUserAccess), takeEvery(CALL_PROFESORS, getProfesors)]);\n}\nexport default function* mySaga() {\n  yield all([actionsWatcher()]);\n}","map":{"version":3,"sources":["D:/www/gits-proyectos/proyecto ERP/ERP V-2/ssr_server/public/src/sagas/index.js"],"names":["call","put","takeEvery","takeLatest","all","axios","Map","map","login","CALL_METRICS","CALL_USER_ACCESS","CALL_PROFESORS","setApiData","saveUserAccess","saveLoginError","saveProfesors","saveUserTokenAndDeleteOldErrors","config","getUserAccess","action","response","post","apiKeyToken","auth","email","payload","password","console","log","data","error","newUserToken","getProfesors","query","actionsWatcher","getMetrics","mySaga"],"mappings":"AAAA,SAASA,IAAT,EAAeC,GAAf,EAAoBC,SAApB,EAA+BC,UAA/B,EAA2CC,GAA3C,QAAsD,oBAAtD;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,GAAG,IAAIC,GAAhB,QAA2B,WAA3B;AAEA,SAASC,KAAT,QAAsB,qBAAtB;AACA,SAASC,YAAT,EAAuBC,gBAAvB,EAAyCC,cAAzC,QAA+D,0BAA/D;AACA,SAASC,UAAT,EAAqBC,cAArB,EAAqCC,cAArC,EAAqDC,aAArD,EAAoEC,+BAApE,QAA2G,qBAA3G;AAEA,SAASC,MAAT,QAAuB,iBAAvB,C,CACA;;AAGA;;;;;;;;;;;;;;;;;;AAiBA,OAAO,UAAUC,aAAV,CAAwBC,MAAxB,EAAgC;AACnC,MAAI;AACA;AACA,UAAMC,QAAQ,GAAG,MAAMpB,IAAI,CAACK,KAAK,CAACgB,IAAN,CAAW,wCAAX,EAAqD;AAAEC,MAAAA,WAAW,EAAEL,MAAM,CAACK;AAAtB,KAArD,EAA0F;AAClHC,MAAAA,IAAI,EAAE;AACFC,QAAAA,KAAK,EAAEL,MAAM,CAACM,OAAP,CAAeD,KADpB;AAEFE,QAAAA,QAAQ,EAAEP,MAAM,CAACM,OAAP,CAAeC;AAFvB;AAD4G,KAA1F,CAAD,CAA3B;AAOA;;;;;;;;;;;AAWA;AACA;;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAyBR,QAAQ,CAACS,IAAlC;AAEA,UAAM5B,GAAG,CAAEmB,QAAQ,CAACS,IAAT,CAAcC,KAAf,GAAwBhB,cAAc,CAACM,QAAQ,CAACS,IAAT,CAAcC,KAAf,CAAtC,GAA8Dd,+BAA+B,CAACI,QAAQ,CAACS,IAAT,CAAcE,YAAf,CAA9F,CAAT;AACH,GAzBD,CAyBE,OAAOD,KAAP,EAAc;AACZH,IAAAA,OAAO,CAACC,GAAR,CAAY,6BAA6BE,KAAzC;AACH;AACJ;AACD,OAAO,UAAUE,YAAV,CAAuBb,MAAvB,EAA+B;AAClC,MAAI;AACA,UAAMC,QAAQ,GAAG,MAAMpB,IAAI,CAACK,KAAK,CAACgB,IAAP,EAAc,+BAAd,EAA8C;AAAEY,MAAAA,KAAK,EAAE;AAAT,KAA9C,CAA3B;AAEA,UAAMhC,GAAG,CAACc,aAAa,CAACR,GAAG,CAACa,QAAQ,CAACS,IAAT,CAAcA,IAAf,CAAJ,CAAd,CAAT;AACH,GAJD,CAIE,OAAOC,KAAP,EAAc;AACZH,IAAAA,OAAO,CAACC,GAAR,CAAY,6BAA6BE,KAAzC;AACH;AACJ;AAED,OAAO,UAAUI,cAAV,GAA2B;AAC9B,QAAM9B,GAAG,CAAC,CACNF,SAAS,CAACO,YAAD,EAAe0B,UAAf,CADH,EAENjC,SAAS,CAACQ,gBAAD,EAAmBQ,aAAnB,CAFH,EAGNhB,SAAS,CAACS,cAAD,EAAiBqB,YAAjB,CAHH,CAAD,CAAT;AAKH;AAED,eAAe,UAAUI,MAAV,GAAmB;AAC9B,QAAMhC,GAAG,CAAC,CACN8B,cAAc,EADR,CAAD,CAAT;AAGH","sourcesContent":["import { call, put, takeEvery, takeLatest, all } from 'redux-saga/effects';\r\nimport axios from 'axios';\r\nimport { Map as map } from 'immutable';\r\n\r\nimport { login } from '../../../utils/auth';\r\nimport { CALL_METRICS, CALL_USER_ACCESS, CALL_PROFESORS } from '../action-types/index.js';\r\nimport { setApiData, saveUserAccess, saveLoginError, saveProfesors, saveUserTokenAndDeleteOldErrors } from '../actions/index.js';\r\n\r\nimport { config } from '../../../config';\r\n//import token from '../../../config';\r\n\r\n\r\n/*export function* getMetrics(action) {\r\n    try {\r\n        const headers = {\r\n            method: 'GET',\r\n            mode: 'no-cors',\r\n            headers: {\r\n                'Authorization': `Bearer ${token.apiToken}`, // Need to get from store once login done\r\n                'Content-Type': 'application/json'\r\n            },\r\n        };\r\n        const response = yield call(axios.get, `http://localhost:8080/metrics/${action.payload.uuid}/${action.payload.type}`, headers);\r\n\r\n        yield put(setApiData(response.data));\r\n    } catch (error) {\r\n        console.log('Request failed at metrics¡¡ error: ' + error);\r\n    }\r\n}*/\r\nexport function* getUserAccess(action) {\r\n    try {\r\n        //const response = yield call(axios.get, `http://localhost:8080/login/${action.payload.user}/${action.payload.password}`);\r\n        const response = yield call(axios.post('http://localhost:3000/api/auth/sign-in', { apiKeyToken: config.apiKeyToken }, {\r\n            auth: {\r\n                email: action.payload.email,\r\n                password: action.payload.password\r\n            }\r\n        }));\r\n\r\n        /*const apiCall = () => {\r\n            return axios.post('http://localhost:3000/api/auth/sign-in', { apiKeyToken: config.apiKeyToken }, {\r\n                auth: {\r\n                    email: action.payload.email,\r\n                    password: action.payload.password\r\n                }\r\n            }).then(response => response.data)\r\n                .catch(err => {\r\n                    throw err;\r\n                });\r\n        }*/\r\n        //if(response.data) login(response.data.newUserToken);\r\n        //yield put(saveUserAccess(map(response.data)));\r\n        console.log('resultado', response.data);\r\n\r\n        yield put((response.data.error) ? saveLoginError(response.data.error) : saveUserTokenAndDeleteOldErrors(response.data.newUserToken));\r\n    } catch (error) {\r\n        console.log('Request failed¡¡ error: ' + error);\r\n    }\r\n}\r\nexport function* getProfesors(action) {\r\n    try {\r\n        const response = yield call(axios.post, `http://localhost:5678/graphql`, { query: 'query Profesores{profesores {id,nombre,nacionalidad,genero,cursos {titulo,id}}}' });\r\n\r\n        yield put(saveProfesors(map(response.data.data)));\r\n    } catch (error) {\r\n        console.log('Request failed¡¡ error: ' + error);\r\n    }\r\n}\r\n\r\nexport function* actionsWatcher() {\r\n    yield all([\r\n        takeEvery(CALL_METRICS, getMetrics),\r\n        takeEvery(CALL_USER_ACCESS, getUserAccess),\r\n        takeEvery(CALL_PROFESORS, getProfesors)\r\n    ])\r\n}\r\n\r\nexport default function* mySaga() {\r\n    yield all([\r\n        actionsWatcher()\r\n    ])\r\n}"]},"metadata":{},"sourceType":"module"}